#!/usr/bin/env bash

create_sonarqube_instance() {
  name=$1

  kubectl create secret generic cocoa-artifactory-dockerconfigjson \
    --from-file=.dockerconfigjson="/root/.docker/config.json" \
    --type=kubernetes.io/dockerconfigjson

  kubectl create -f - << EOF
apiVersion: apps/v1
kind: Deployment
metadata:
 name: $name
 labels:
   app: $name
spec:
 replicas: 1
 selector:
   matchLabels:
     app: $name
 template:
   metadata:
     labels:
       app: $name
   spec:
     containers:
     - name: $name
       imagePullPolicy: IfNotPresent
       image: sonarqube:8.9.0-community
       startupProbe:
         httpGet:
           path: /api/system/status
           port: 9000
         initialDelaySeconds: 90
         failureThreshold: 30
         periodSeconds: 10
     imagePullSecrets:
     - name: cocoa-artifactory-dockerconfigjson
EOF
}

check_if_deployment_running() {
  instance_name=$1

  if ! kubectl rollout status deployment/"$instance_name"; then
    echo -e "\nDeployment: $instance_name not available.\nConsider fixing the problem after running the 'kubectl get deployment $instance_name' command.\n
If you want to try again with a new deployment, please delete the deployment before running a new pipeline with the following command:\n
kubectl delete deployment $instance_name
" >&2
    exit 1
  fi
}

port_forward() {
  instance_name=$1
  pod_name=$(kubectl get pods | grep "$instance_name" | awk 'FNR == 1 {print $1}')
  export SONAR_POD_NAME=$pod_name
  # TODO: the logs of the port-forwarding should be redirected
  # (and only printed in PIPELINE_DEBUG mode) so it won't pollute the actual logs
  kubectl port-forward --address 0.0.0.0 pod/"${pod_name}" 9001:9000 &
}

set_sonarqube_settings() {
  read -r SONAR_HOST_URL <<< "$1"
  read -r SONAR_USER <<< "$2"; if [ "$SONAR_USER" == "-" ]; then read -r SONAR_USER; fi
  read -r SONAR_PASS <<< "$3"

  export SONAR_HOST_URL
  export SONAR_USER
  export SONAR_PASS
}

if [ -n "$SONAR_CONFIGURED" ]; then
  printf "\n\nSonarQube configured, using the SonarQube integration..." >&2
  printf "\n======================\n\n" >&2
elif [ "$SONAR_INSTANCE" ]; then
  printf "\n\nUsing the previously created SonarQube instance..." >&2
  printf "\n======================\n\n" >&2

  port_forward "$SONAR_INSTANCE_NAME"
  set_sonarqube_settings "$SONAR_HOST_URL" "-" "" < /tmp/sonarqube-token
else
  printf "\n\nCreating new SonarQube instance..." >&2
  printf "\n======================\n\n" >&2
  export SONAR_INSTANCE_NAME
  SONAR_INSTANCE_NAME="cocoa-sonarqube-"$(date +%s%3N)

  create_sonarqube_instance "$SONAR_INSTANCE_NAME"
  check_if_deployment_running "$SONAR_INSTANCE_NAME"
  port_forward "$SONAR_INSTANCE_NAME"

  set_sonarqube_settings \
    "$SONAR_HOST_URL" \
    "admin" \
    "admin"
fi
